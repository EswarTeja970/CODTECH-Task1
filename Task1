Basic logic gates:

module allgates(
    input  wire A,
    input  wire B,
    output reg  not1,
    output reg  or2,
    output reg  and3,
    output reg  nor4,
    output reg  nand5,
    output reg  xor6,
    output reg  xnor7
);

always @(*) begin
    not1  = ~A;
    or2   = A | B;
    and3  = A & B;
    nor4  = ~(A | B);
    nand5 = ~(A & B);
    xor6  = A ^ B;
    xnor7 = ~(A ^ B);
end
endmodule



/*8 bit adder Code*/

module adder8bit (
    input  [7:0] a,
    input  [7:0] b,
    input        cin,
    output reg [7:0] sum,
    output reg       cout
);

always @(*) begin
    {cout, sum} = a + b + cin;
end

endmodule


/* 8*1 mux: */

module mux8to1 (
    input  [7:0] d,
    input  [2:0] sel,
    output reg   z
);

always @(*) begin
    case(sel)
        3'b000: z = d[0];
        3'b001: z = d[1];
        3'b010: z = d[2];
        3'b011: z = d[3];
        3'b100: z = d[4];
        3'b101: z = d[5];
        3'b110: z = d[6];
        3'b111: z = d[7];
        default: z = 1'b0;  
    endcase
end
endmodule
